var x: integer;
var y: integer;
var z: integer;
var i: integer;
var name: string;
trueconstant flag = 1;
z2(z / 2)0((z / 2) = 0)z2(z + 2)z := (z + 2)z1(z + 1)z := (z + 1)if ((z / 2) = 0) then
  z := (z + 2)
else
  z := (z + 1)resultreturn (result)begin
  var result : integer
  var re : integer
  if ((z / 2) = 0) then
    z := (z + 2)
  else
    z := (z + 1);
  return (result);
endfunction compute (a : integer, b : integer, f : integer) : integer
  begin
    var result : integer
    var re : integer
    if ((z / 2) = 0) then
      z := (z + 2)
    else
      z := (z + 1);
    return (result);
  end;
write (x)begin
  write (x);
endprocedure print (x : integer)
  begin
    write (x);
  end;
read (x)begin
  read (x);
endprocedure scanf (x : integer)
  begin
    read (x);
  end;
54(5 * 4)32(3 / 2)((5 * 4) and (3 / 2))e := ((5 * 4) and (3 / 2))abc(b * c)(a + (b * c))d((a + (b * c)) -d)e := ((a + (b * c)) -d)ab(a + b)c((a + b) * c)d(((a + b) * c) -d)f := (((a + b) * c) -d)ab(a * b)cd(c / d)((a * b) + (c / d))g := ((a * b) + (c / d))abc(b * c)d((b * c) / d)(a + ((b * c) / d))h := (a + ((b * c) / d))ef(e * f)gh(g / h)((e * f) + (g / h))i := ((e * f) + (g / h))ef(e + f)gh(g -h)((e + f) * (g -h))j := ((e + f) * (g -h))ije(j -e)(i * (j -e))fh(f / h)((i * (j -e)) + (f / h))k := ((i * (j -e)) + (f / h))kij(i + j)(k * (i + j))efg(f * g)(e + (f * g))h((e + (f * g)) / h)((k * (i + j)) -((e + (f * g)) / h))l := ((k * (i + j)) -((e + (f * g)) / h))lreturn (l)begin
  var e : integer
  var f : integer
  var g : integer
  var h : integer
  var i : integer
  var j : integer
  var k : integer
  var l : integer
  e := ((5 * 4) and (3 / 2));
  e := ((a + (b * c)) -d);
  f := (((a + b) * c) -d);
  g := ((a * b) + (c / d));
  h := (a + ((b * c) / d));
  i := ((e * f) + (g / h));
  j := ((e + f) * (g -h));
  k := ((i * (j -e)) + (f / h));
  l := ((k * (i + j)) -((e + (f * g)) / h));
  return (l);
endfunction calculate (a : integer, b : integer, c : integer, d : integer) : integer
  begin
    var e : integer
    var f : integer
    var g : integer
    var h : integer
    var i : integer
    var j : integer
    var k : integer
    var l : integer
    e := ((5 * 4) and (3 / 2));
    e := ((a + (b * c)) -d);
    f := (((a + b) * c) -d);
    g := ((a * b) + (c / d));
    h := (a + ((b * c) / d));
    i := ((e * f) + (g / h));
    j := ((e + f) * (g -h));
    k := ((i * (j -e)) + (f / h));
    l := ((k * (i + j)) -((e + (f * g)) / h));
    return (l);
  end;
2a := 23b := 34c := 45d := 5abcdcalculate (a, b, c, d)result := calculate (a, b, c, d)write (result)"DummyTest"name := "DummyTest"12x := 1210y := 10xyflagcompute (x, y, flag)x(compute (x, y, flag) + x)z := (compute (x, y, flag) + x)09x2(x * 2)y3(y / 3)((x * 2) + (y / 3))z := ((x * 2) + (y / 3))z50(z < 50)z2(z / 2)0((z / 2) = 0)z2(z + 2)z := (z + 2)z1(z + 1)z := (z + 1)if ((z / 2) = 0) then
  z := (z + 2)
else
  z := (z + 1)begin
  if ((z / 2) = 0) then
    z := (z + 2)
  else
    z := (z + 1);
endwhile (z < 50) do
  begin
    if ((z / 2) = 0) then
      z := (z + 2)
    else
      z := (z + 1);
  end
odbegin
  z := ((x * 2) + (y / 3));
  while (z < 50) do
    begin
      if ((z / 2) = 0) then
        z := (z + 2)
      else
        z := (z + 1);
    end
  od;
endfor i = 0 to 9 do
  begin
    z := ((x * 2) + (y / 3));
    while (z < 50) do
      begin
        if ((z / 2) = 0) then
          z := (z + 2)
        else
          z := (z + 1);
      end
    od;
  end
od0return (0)begin
  var a : integer
  var b : integer
  var c : integer
  var d : integer
  var result : integer
  a := 2;
  b := 3;
  c := 4;
  d := 5;
  result := calculate (a, b, c, d);
  write (result);
  name := "DummyTest";
  x := 12;
  y := 10;
  z := (compute (x, y, flag) + x);
  for i = 0 to 9 do
    begin
      z := ((x * 2) + (y / 3));
      while (z < 50) do
        begin
          if ((z / 2) = 0) then
            z := (z + 2)
          else
            z := (z + 1);
        end
      od;
    end
  od;
  return (0);
endfunction main () : integer
  begin
    var a : integer
    var b : integer
    var c : integer
    var d : integer
    var result : integer
    a := 2;
    b := 3;
    c := 4;
    d := 5;
    result := calculate (a, b, c, d);
    write (result);
    name := "DummyTest";
    x := 12;
    y := 10;
    z := (compute (x, y, flag) + x);
    for i = 0 to 9 do
      begin
        z := ((x * 2) + (y / 3));
        while (z < 50) do
          begin
            if ((z / 2) = 0) then
              z := (z + 2)
            else
              z := (z + 1);
          end
        od;
      end
    od;
    return (0);
  end;
